#!/usr/bin/env python3

from utils.voice_utils import speak_text
import os
import sys
import json
import requests
from datetime import datetime

# Importar utilidades
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# URLs de bases de datos de vulnerabilidades
VULNERABILITY_DATABASES = {
    "nvd": "https://services.nvd.nist.gov/rest/json/cves/2.0",
    "cve": "https://cve.circl.lu/api/cve",
    "exploit_db": "https://www.exploit-db.com/search?q="
}

# Mapeo de severidades
SEVERITY_MAPPING = {
    "CRITICAL": "CRÍTICO",
    "HIGH": "ALTO",
    "MEDIUM": "MEDIO",
    "LOW": "BAJO",
    "NONE": "INFORMATIVO"
}


def search_vulnerability_database(service_name, version=None, voice_enabled=False):
    """
    Busca vulnerabilidades en bases de datos públicas para un servicio específico

    Args:
        service_name (str): Nombre del servicio
        version (str): Versión del servicio (opcional)
        voice_enabled (bool): Indica si el asistente de voz está habilitado

    Returns:
        dict: Resultados de la búsqueda
    """
    try:
        print(f"\n[*] Consultando bases de datos de vulnerabilidades para {service_name}" +
              (f" versión {version}" if version else ""))
        speak_text(
            f"Consultando bases de datos de vulnerabilidades", voice_enabled)

        # Construir la consulta de búsqueda
        search_query = service_name
        if version:
            search_query += f" {version}"

        # Inicializar resultados
        results = {
            "service": service_name,
            "version": version,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "vulnerabilities": [],
            "total_vulnerabilities": 0,
            "severity_counts": {
                "CRÍTICO": 0,
                "ALTO": 0,
                "MEDIO": 0,
                "BAJO": 0,
                "INFORMATIVO": 0
            }
        }

        # Consultar NVD (National Vulnerability Database)
        try:
            print("[*] Consultando NVD...")
            params = {
                "keywordSearch": search_query,
                "resultsPerPage": 20
            }
            response = requests.get(
                VULNERABILITY_DATABASES["nvd"], params=params, timeout=10)

            if response.status_code == 200:
                data = response.json()
                vulnerabilities = data.get("vulnerabilities", [])

                for vuln in vulnerabilities:
                    cve_data = vuln.get("cve", {})
                    cve_id = cve_data.get("id", "")
                    description = ""

                    # Obtener descripción
                    descriptions = cve_data.get("descriptions", [])
                    for desc in descriptions:
                        if desc.get("lang") == "en":
                            description = desc.get("value", "")
                            break

                    # Obtener métricas de severidad
                    metrics = cve_data.get("metrics", {})
                    cvss_data = metrics.get("cvssMetricV31", [{}])[0] if "cvssMetricV31" in metrics else \
                        metrics.get("cvssMetricV30", [{}])[0] if "cvssMetricV30" in metrics else \
                        metrics.get("cvssMetricV2", [{}])[
                        0] if "cvssMetricV2" in metrics else {}

                    cvss_data = cvss_data.get("cvssData", {})
                    severity = cvss_data.get("baseSeverity", "NONE")
                    score = cvss_data.get("baseScore", 0)

                    # Mapear severidad a español
                    severity_es = SEVERITY_MAPPING.get(severity, "INFORMATIVO")

                    # Incrementar contador de severidad
                    results["severity_counts"][severity_es] += 1

                    # Añadir vulnerabilidad a los resultados
                    results["vulnerabilities"].append({
                        "id": cve_id,
                        "description": description,
                        "severity": severity_es,
                        "score": score,
                        "source": "NVD"
                    })
            else:
                print(f"[!] Error al consultar NVD: {response.status_code}")

        except Exception as e:
            print(f"[!] Error al consultar NVD: {e}")

        # Consultar CVE API alternativa
        try:
            print("[*] Consultando CVE API alternativa...")
            response = requests.get(
                f"{VULNERABILITY_DATABASES['cve']}/{search_query}", timeout=10)

            if response.status_code == 200:
                data = response.json()

                for vuln in data:
                    cve_id = vuln.get("id", "")

                    # Verificar si esta vulnerabilidad ya está en los resultados
                    if any(v["id"] == cve_id for v in results["vulnerabilities"]):
                        continue

                    description = vuln.get("summary", "")
                    cvss = vuln.get("cvss", 0)

                    # Determinar severidad basada en CVSS
                    severity_es = "INFORMATIVO"
                    if cvss >= 9.0:
                        severity_es = "CRÍTICO"
                    elif cvss >= 7.0:
                        severity_es = "ALTO"
                    elif cvss >= 4.0:
                        severity_es = "MEDIO"
                    elif cvss > 0:
                        severity_es = "BAJO"

                    # Incrementar contador de severidad
                    results["severity_counts"][severity_es] += 1

                    # Añadir vulnerabilidad a los resultados
                    results["vulnerabilities"].append({
                        "id": cve_id,
                        "description": description,
                        "severity": severity_es,
                        "score": cvss,
                        "source": "CVE API"
                    })
            else:
                print(
                    f"[!] Error al consultar CVE API: {response.status_code}")

        except Exception as e:
            print(f"[!] Error al consultar CVE API: {e}")

        # Actualizar total de vulnerabilidades
        results["total_vulnerabilities"] = len(results["vulnerabilities"])

        # Ordenar vulnerabilidades por severidad (de mayor a menor)
        severity_order = {"CRÍTICO": 4, "ALTO": 3,
                          "MEDIO": 2, "BAJO": 1, "INFORMATIVO": 0}
        results["vulnerabilities"] = sorted(
            results["vulnerabilities"],
            key=lambda x: (severity_order.get(x["severity"], 0), x["score"]),
            reverse=True
        )

        # Guardar resultados en archivo
        output_dir = "resultados_vulnerabilidades"
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        filename = f"{output_dir}/vulnerabilidades_{service_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(results, f, indent=4, ensure_ascii=False)

        print(
            f"\n[+] Se encontraron {results['total_vulnerabilities']} vulnerabilidades")
        print(f"[+] Resultados guardados en {filename}")
        speak_text(
            f"Se encontraron {results['total_vulnerabilities']} vulnerabilidades", voice_enabled)

        return results

    except Exception as e:
        print(
            f"[!] Error al consultar bases de datos de vulnerabilidades: {e}")
        return None


def run_vulnerability_database_scan(target, service_info, voice_enabled=False):
    """
    Ejecuta un escaneo de bases de datos de vulnerabilidades para los servicios detectados

    Args:
        target (str): Dirección IP o dominio objetivo
        service_info (list): Lista de servicios detectados
        voice_enabled (bool): Indica si el asistente de voz está habilitado

    Returns:
        dict: Resultados del escaneo
    """
    try:
        print(f"\n===== INICIANDO ESCANEO DE BASES DE DATOS DE VULNERABILIDADES =====\n")
        speak_text(
            "Iniciando escaneo de bases de datos de vulnerabilidades", voice_enabled)

        # Inicializar resultados
        results = {
            "target": target,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "services": [],
            "total_vulnerabilities": 0,
            "severity_summary": {
                "CRÍTICO": 0,
                "ALTO": 0,
                "MEDIO": 0,
                "BAJO": 0,
                "INFORMATIVO": 0
            }
        }

        # Verificar si hay servicios para analizar
        if not service_info:
            print("[!] No se proporcionaron servicios para analizar")
            speak_text(
                "No se proporcionaron servicios para analizar", voice_enabled)
            return results

        # Analizar cada servicio
        for service in service_info:
            service_name = service.get("servicio", "")
            version = service.get("version", "")
            puerto = service.get("puerto", "")

            # Saltar si no hay nombre de servicio
            if not service_name or service_name == "desconocido":
                continue

            print(
                f"\n[*] Analizando servicio: {service_name} {version} en puerto {puerto}")
            speak_text(f"Analizando servicio {service_name}", voice_enabled)

            # Buscar vulnerabilidades para este servicio
            vuln_results = search_vulnerability_database(
                service_name, version, voice_enabled)

            if vuln_results and vuln_results.get("vulnerabilities"):
                # Añadir resultados del servicio
                service_result = {
                    "servicio": service_name,
                    "version": version,
                    "puerto": puerto,
                    "vulnerabilidades": vuln_results.get("vulnerabilities", []),
                    "total_vulnerabilidades": vuln_results.get("total_vulnerabilities", 0)
                }

                results["services"].append(service_result)

                # Actualizar contadores totales
                results["total_vulnerabilities"] += service_result["total_vulnerabilidades"]

                # Actualizar resumen de severidad
                for severity, count in vuln_results.get("severity_counts", {}).items():
                    results["severity_summary"][severity] += count

        # Mostrar resumen
        print("\n===== RESUMEN DE VULNERABILIDADES =====")
        print(
            f"Total de vulnerabilidades encontradas: {results['total_vulnerabilities']}")
        print("Distribución por severidad:")
        for severity, count in results["severity_summary"].items():
            if count > 0:
                print(f"  - {severity}: {count}")

        speak_text(
            f"Escaneo completado. Se encontraron {results['total_vulnerabilities']} vulnerabilidades", voice_enabled)

        return results

    except Exception as e:
        print(
            f"[!] Error al ejecutar escaneo de bases de datos de vulnerabilidades: {e}")
        return None


# Función principal para pruebas
if __name__ == "__main__":
    # Ejemplo de servicios detectados
    services = [
        {"servicio": "apache", "version": "2.4.41", "puerto": 80},
        {"servicio": "openssh", "version": "7.6p1", "puerto": 22}
    ]
    run_vulnerability_database_scan("192.168.1.1", services, False)